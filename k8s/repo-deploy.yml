apiVersion: v1
kind: ConfigMap
metadata:
  name: repo
data:
  repo.py: |
    from http.server import HTTPServer, SimpleHTTPRequestHandler


    class RepoRequestHandler(SimpleHTTPRequestHandler):
      def _set_headers(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

      def _encode(self, text):
        return text.encode('utf8')

      def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        file_name = self.path[1:]
        with open(file_name, "w+b") as f:
          f.write(body)
          f.close()
        self._set_headers()
        self.wfile.write(self._encode(f'{file_name} stored\n'))


    host = '0.0.0.0'
    port = 8080

    print(f'simple artifact repo running on {host}:{port}')

    httpd = HTTPServer((host, port), RepoRequestHandler)
    httpd.serve_forever()
---
apiVersion: v1
kind: Service
metadata:
  name: repo
spec:
  selector:
    app: repo
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: repo
  name: repo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: repo
  template:
    metadata:
      labels:
        app: repo
    spec:
      containers:
        - image: python:3
          name: repo
          command: ["bash", "-ec", "cd /tmp && python /opt/repo/repo.py"]
          ports:
            - containerPort: 8080
          volumeMounts:
          - name: config-volume
            mountPath: /opt/repo
      volumes:
      - name: config-volume
        configMap:
          name: repo
